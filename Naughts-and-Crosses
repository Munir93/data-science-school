Your assignment: Create a Tic Tac Toe game. You are free to use any IDE you like.

Here are the requirements:

2 players should be able to play the game (both sitting at the same computer)
The board should be printed out every time a player makes a move
You should be able to accept input of the player position and then place a symbol on the board

STEP 1 CREATE THE BOARD

from IPython.display import clear_output
def display_board(board): # shows the user a baord is being updated without showing all previous print functions
    clear_output()
    print(' | | ')
    print(board[7] + '|' + board[8] + '|' + board[9])
    print(' | | ')
    print('-----')
    print(' | | ')
    print(board[4] + '|' + board[5] + '|' + board[6])
    print(' | | ')
    print('-----')
    print(' | | ')
    print(board[1] + '|' + board[2] + '|' + board[3])
    print(' | | ')
    
STEP 1 TEST 

test_board = ['#','X','O','X','O','X','O','X','O','X']
display_board(test_board)

STEP 2 Write a function that can take in a player input and assign their marker as 'X' or 'O'.

def player_input():
    marker = ''
    
    while not (marker == 'X' or marker == 'O'):
        marker = input('Player 1: Do you want to be X or O? ').upper()

    if marker == 'X':
        return ('X', 'O')
    else:
        return ('O', 'X')
        
   STEP 3 Write a function that takes in the board list object, a marker ('X' or 'O'), and a desired position (number 1-9) and assigns it to the board.
   
   def place_marker(board, marker, position):
    '''
    asigns a marker at a index position on the board 
    '''
    board[position] = marker
    
    STEP 3 TEST 
    
    place_marker(test_board,'$',8)
    display_board(test_board)
    
    STEP 4 Write a function that takes in a board and checks to see if someone has won.
    
    def win_check(board, mark):
    '''
    Check if there is a winning squence
    '''
    return ((board[7] == mark and board[8] == mark and board[9] == mark) or # top
             (board[4] == mark and board[5] == mark and board[6] == mark) or # middle H
              (board[1] == mark and board[2] == mark and board[3] == mark) or # bottom
                (board[1] == mark and board[5] == mark and board[9] == mark) or #diag
                  (board[3] == mark and board[5] == mark and board[7] == mark) or # diag
                    (board[1] == mark and board[4] == mark and board[7] == mark) or # vert
                      (board[2] == mark and board[5] == mark and board[8] == mark) or #vert
                        (board[3] == mark and board[6] == mark and board[9] == mark)) #vert
       
       STEP 4 CHECK
       win_check(test_board,'X')
       
       STEP 5 Write a function that uses the random module to randomly decide which player goes first. You may want to lookup random.randint() Return a string of which player went first.
       
       import random

def choose_first():
    ''' Chooses a random player to go first by mimicking a coin toss'''
    if random.randint(0, 1) == 0:
        return 'Player 2'
    else:
        return 'Player 1'
        
     STEP 6 Write a function that returns a boolean indicating whether a space on the board is freely available.
     
     def space_check(board, position):
    ''' Checks if pace on board is free'''
    return board[position] == ' '
    
    STEP 7 Write a function that checks if the board is full and returns a boolean value. True if full, False otherwise.
    
    def full_board_check(board):
    ''' Checks if board is full using space check function
    i.e. if space check is true then the board is not full so returns false'''
    for i in range(1,10):
        if space_check(board, i):
            return False
    return True
    
    STEP 8 Write a function that asks for a player's next position (as a number 1-9) and then uses the function from step 6 to check if its a free position. If it is, then return the position for later use.
    
    def player_choice(board):
    '''Takes a position from the user 1-9 then checks if its a valid position then checks if the position is free'''
    
    position = 0
    
    while position not in [1,2,3,4,5,6,7,8,9] or not space_check(board, position):
        position = int(input('Please choose your next move 1-9' ))
    
    return position
    
    STEP 9 Write a function that asks the player if they want to play again and returns a boolean True if they do want to play again.
    
    def replay():
    ''' Asks player if they want to play again'''
    reply = input('Do you want to play again? Yes or No: ')
    if reply.lower() == 'yes':
        return True
    elif reply.lower() == 'no':
        return False
        
     CONNECT ALL STEPS WITH WHILE LOOPS
     
     print('Welcome to naughts and crosses!')

while True:
    #reset the board
    theBoard = [' '] * 10                                               # creates and empty board as a list
    player1_marker, player2_marker = player_input()                        # creates a tuple in with input choses from player1
    turn = choose_first()                                                  # selects random player to start game
    print(turn + ' will go first.')
    
    play_game = input('Are you ready to play? Enter Yes or No: ')                  # Asks if ready 
    
    if play_game.lower()[0] == 'y':
        game_on = True
    else:
        game_on = False
    
    while game_on:                                                       # while game on is true 
        if turn == 'Player 1':                                           # Player 1's Turn
            display_board(theBoard)                                      # applies board 
            position = player_choice(theBoard)                           # takes postion and checks if valid
            place_marker(theBoard, player1_marker, position)                # uses chosen position and assigns it to board
            
            if win_check(theBoard, player1_marker):                     #Checks if winning sequence 
                display_board(theBoard)
                print('Well done player 1 has won!')
                game_on = False
                
            else:
                if full_board_check(theBoard):
                    display_board(theBoard)                 #Checks to see if its a drow and breaks out of while loop if true
                    print('The game is a draw!')     
                    break                                          # if board is full and there is no winner 
                else:
                    turn = 'Player 2'
        else:                                                      # Player 2's turn
            display_board(theBoard)                                      # applies board 
            position = player_choice(theBoard)                           # takes postion and checks if valid
            place_marker(theBoard, player2_marker, position)               # uses chosen position and assigns it to board
            
            if win_check(theBoard, player2_marker):                     #Checks if winning sequence 
                display_board(theBoard)
                print('Well done player 2 has won!')
                game_on = False                                    #?????
                
            else:
                if full_board_check(theBoard):              #Checks to see if its a drow and breaks out of while loop if true
                    display_board(theBoard) 
                    print('The game is a draw!')
                    break
                else:
                    turn = 'Player 1'
        
        
    if not replay():
            break 
            
        
 
    
   
