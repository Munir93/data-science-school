###NOTT MY WORK - QA CONSULTANTS - TOM KNOWLES 

# Applying KNN Model to breast canver data 


#install.packages("class")

library(class)
library(ggplot2)

setwd("C:/Users/Admin/Downloads/KNNBCdata")

rawBCD = read.table("BreastCancerData.data", sep = ",")  #read.table is being used due to it
#having the unusual .data extension

names(rawBCD) <- c("ID","Result","Mean_Radius","Mean_Texture","Mean_Perimeter",                    #setting the names of all the columns 
                   "Mean_Area","Mean_Smoothness","Mean_Compactness", "Mean_Concavity",
                   "Mean_ConcavePoints", "Mean_Symmetry","Mean_FractalDimension",
                   "SE_Radius","SE_Texture","SE_Perimeter","SE_Area","SE_Smoothness",
                   "SE_Compactness","SE_Concavity","SE_ConcavePoints","SE_Symmetry",
                   "SE_FractalDimension","Worst_Radius","Worst_Texture","Worst_Perimeter",
                   "Worst_Area","Worst_Smoothness","Worst_Compactness","Worst_Concavity",
                   "Worst_ConcavePoints","Worst_Symmetry","Worst_FractalDimension")


#Let's remove the ID Variable - R has an index built-in, so a second one is extraneous
#Besides, we don't want to feed ID in as a parameter to our KNN

BCD_NOID = rawBCD[,-1]  

#We also need a subset of the BCD data set without the Result column
#This allows it to be used for normalisation and validation purposes

BCD_NORESULTS = BCD_NOID[,-1]

#creating a feature scaling fucntion to normalise our dataset 

FeatureScaling <- function(x) { ((x - min(x)) / (max(x) - min(x))) }
#This corresponds to the equation given in the slides

#next we need to apply your feature scaling fuction to our dataset
# as.data.frame saves as a dataframe 
#lappy allows you to apply a function to every element in a table column by column 
BCD_NORMALISED = as.data.frame(lapply(BCD_NORESULTS,FeatureScaling))

#next we need to slpit the data into a training set and a test set to see if your model is performing well

BCD_Training  = BCD_NORMALISED[1:450,]

BCD_Test = BCD_NORMALISED[451:569,]


#Finally we need to generate a K value - k value is the number of nearest data points evaluated before making a classification
#The rule of thumb is the square root of the number of observations
#trained with, so let's use that for now
#Result is floored, as k must be a whole number

K_Value <- floor(sqrt(length(BCD_Training[,1])))  

#now we can use the KNN model that comes with the class package (trainingset, test set, results, kvalue )

BCD_Predictions <- knn(BCD_Training,BCD_Test,BCD_NOID[1:450,1], k= K_Value)
#Now, let's view the performance of our KNN
#This is expressed in terms of {True Positives   False Positives}
#                              {False Negatives  True Negatives}

#First, subset the reference data into its own data frame

bcd_reference = BCD_NOID[451:569,1]

table(BCD_Predictions,bcd_reference)


